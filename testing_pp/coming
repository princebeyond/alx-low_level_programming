#include "main.h"
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/wait.h>
#include <string.h>

/**
 * execute_command - exicuting code
 *
 * @command: ptr TO COMMAND.
 */
void execute_command(char *command)
{
	int argc = 100;
	char **args = malloc((argc + 1) * sizeof(char *));
	int status;
	char *token = strtok(command, " ");
	int idx = 0;
	int i;

	pid_t pid = fork();
	if (args == NULL)
	{
		fprintf(stderr, "Error allocating memory for args\n");
		exit(EXIT_FAILURE);
	}

	while (token != NULL)
	{
		args[idx] = strdup(token);
		token = strtok(NULL, " ");
		idx++;

		if (idx >= argc)
		{
			argc *= 2;
			args = realloc(args, (argc + 1) * sizeof(char*));
			if (args[idx] == NULL)
			{
				fprintf(stderr, "Error allocating memory for args[idx]\n");
				exit(EXIT_FAILURE);
			}
		}
	}
	/**args[idx] = NULL;*/
	/**if (args[idx] == NULL)*/
	/**{*/
		/**fprintf(stderr, "Error allocating memory for args[idx]\n");*/
		/**exit(EXIT_FAILURE);*/
	/**}*/
	args[idx] = NULL;

	/**if (args == NULL)*/
	/**{*/
		/**fprintf(stderr, "Error allocating memory for args\n");*/
		/**exit(EXIT_FAILURE);*/
	/**}*/
	/**args[0] = command;*/
	/**args[1] = NULL;*/

	if (pid == -1)
	{
		fprintf(stderr, "Error forking\n");
		free(args);
		exit(EXIT_FAILURE);

	}
	if (pid == 0)
	{
		if (execve(args[0], args, NULL) == -1)
		{
			fprintf(stderr, "./hsh: No such file or directory\n");
			exit(EXIT_FAILURE);
		}
	}
	else
	{
		waitpid(pid, &status, 0);
	}
	for (i = 0; i < idx; i++)
	{
		free(args[i]);
	}
	free(args);
}
